#include <spirit/Types/spCurve.h>

spCurve::spCurve(int curve_dof, int curve_order): curve_dof_(curve_dof), curve_order_(curve_order) {
}

spCurve::~spCurve() {}

void spCurve::SetBezierControlPoints(const Eigen::MatrixXd& pts) {
  if((pts.rows() != curve_dof_)||(pts.cols() != curve_order_+1)) {
    SPERROREXIT("Matrix dimension mismatch.");
  }
  ctrl_pts_ = pts;
}

void spCurve::SetHermiteControlPoints(const Eigen::MatrixXd& pts) {
  if((pts.rows() != curve_dof_)||(pts.cols() != curve_order_+1)) {
    SPERROREXIT("Wrong matrix dimension requested.");
  }
  if(pts.cols() == 4) {
    // hermite to bezier conversion matrix
    spMat4x4 conv;
    conv << 1, 0, 0, 0,
        1, 1.0f/3, 0, 0,
        0, 0, 1, -1.0f/3,
        0, 0, 1, 0;
    ctrl_pts_ =  pts*conv.transpose();
  } else {
    SPERROREXIT("Requested Order of curve has not been implemented");
  }
}

const Eigen::MatrixXd& spCurve::GetBezierControlPoints() {
  return ctrl_pts_;
}

void spCurve::GetPoint(Eigen::VectorXd& point, double t) {
  if(point.rows() != curve_dof_) {
    SPERROREXIT("Wrong point dimention requested.");
  }

  point = (pow((1 - t), 3) * ctrl_pts_.col(0)) +
      (3 * pow((1 - t), 2) * t * ctrl_pts_.col(1)) +
      (3 * (1 - t) * pow(t, 2) * ctrl_pts_.col(2)) +
      (pow(t, 3) * ctrl_pts_.col(3));
  // calc global coordinates of the point
//  point = pose_ * point;
}

void spCurve::GetPointsXd(spPointsXd& pts_vec, int num_mid_pts) {
  int num_pts = num_mid_pts - 1;
  for (int t = 0; t <= num_pts; t++) {
    spPointXd point(curve_dof_);
    this->GetPoint(point, t * (1.0 / num_pts));
//    std::shared_ptr<spPoint> point_ptr = std::make_shared<spPoint>(point);
    pts_vec.push_back(point);
  }
}

void spCurve::GetPoints3d(spPoints3d& pts_vec, int num_mid_pts) {
  int num_pts = num_mid_pts - 1;
  for (int t = 0; t <= num_pts; t++) {
    spPointXd point(curve_dof_);
    this->GetPoint(point, t * (1.0 / num_pts));
    pts_vec.push_back(point.head(3));
  }
}
